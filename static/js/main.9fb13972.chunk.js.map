{"version":3,"sources":["contexts/appContext.js","components/views/TableView/TableHeader.jsx","components/views/TableView/TableRow.jsx","components/common/Loader.jsx","utils/fomatter.js","components/hocs/withSanitizedData.jsx","components/views/TableView/TableView.jsx","components/views/GridView/GridCard.jsx","components/views/GridView/GridView.jsx","components/common/Navbar.jsx","components/views/DetailView/DetailView.jsx","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppContextProvider","state","data","fetch","response","json","this","setState","props","Provider","value","className","children","Component","Consumer","TableHeader","headers","map","header","idx","key","scope","TableRow","src","mainImageUrl","alt","fullAdress","yearBuilt","priceFormatted","rentFormmated","grossField","to","id","type","Loader","formatNumber","number","locale","Intl","NumberFormat","minimumFractionDigits","format","withSanitizedData","WrappedComponent","rawData","financial","address","physical","sanitizedProps","listPrice","monthlyRent","Number","toFixed","address1","city","zip","TableView","context","properties","item","contextType","withRouter","GridCard","GridView","Navbar","role","DetailView","match","params","itemFound","find","resources","photos","Carousel","photo","Item","url","Caption","description","App","style","marginTop","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fb13972.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst baseUrl =\n  \"https://samplerspubcontent.blob.core.windows.net/public/properties.json\";\n\nexport const AppContext = React.createContext();\n\nexport class AppContextProvider extends Component {\n  state = {\n    data: null,\n  };\n  async componentDidMount() {\n    const response = await fetch(baseUrl);\n    const data = await response.json();\n    this.setState((state, props) => {\n      return { data };\n    });\n  }\n  render() {\n    return (\n      <AppContext.Provider value={this.state.data}>\n        <div className=\"container-fluid\">{this.props.children}</div>\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppContextConsumer = AppContext.Consumer;\n","import React from \"react\";\n\nexport default function TableHeader({ headers }) {\n  return (\n    <thead>\n      <tr>\n        {headers.map((header, idx) => (\n          <th key={idx} scope=\"col\">\n            {header}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst TableRow = (props) => {\n  return (\n    <tr className=\"centeredv-content\">\n      <td>\n        <img\n          src={props.mainImageUrl}\n          className={props.mainImageUrl && \"image-property\"}\n          alt=\"property\"\n        />\n      </td>\n      <td>{props.fullAdress}</td>\n      <td>{props.yearBuilt}</td>\n      <td>{\"$\" + props.priceFormatted}</td>\n      <td>{\"$\" + props.rentFormmated}</td>\n      <td>{props.grossField + \"%\"}</td>\n      <td>\n        <Link to={`/detail/${props.id}`}>\n          <button type=\"button\" className=\"btn btn-outline-success\">\n            See Details\n          </button>\n        </Link>\n      </td>\n    </tr>\n  );\n};\nexport default TableRow;\n","import React from \"react\";\n\nexport default function Loader() {\n  return <div>Loading...</div>;\n}\n","function formatNumber(number, locale = \"en-US\") {\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: 2,\n  }).format(number);\n}\nexport default formatNumber;\n","import React from \"react\";\nimport formatNumber from \"../../utils/fomatter\";\n\nfunction withSanitizedData(WrappedComponent, rawData) {\n  const { financial, address, physical } = rawData;\n  const sanitizedProps = {\n    ...rawData,\n    yearBuilt: \"\",\n    priceFormatted: \"\",\n    rentFormmated: \"\",\n    grossField: \"\",\n  };\n  if (physical) {\n    sanitizedProps.yearBuilt = physical.yearBuilt;\n  }\n\n  if (financial && financial.listPrice) {\n    sanitizedProps.priceFormatted = formatNumber(financial.listPrice);\n  }\n  if (financial && financial.monthlyRent) {\n    sanitizedProps.rentFormmated = formatNumber(financial.monthlyRent);\n  }\n  if (financial && financial.monthlyRent && financial.listPrice) {\n    sanitizedProps.grossField = Number(\n      ((financial.monthlyRent * 12) / financial.listPrice) * 100\n    ).toFixed(2);\n  }\n  sanitizedProps.fullAdress = `${address.address1}, ${address.city}, ${address.state} ${address.zip}`;\n\n  return <WrappedComponent key={rawData.id} {...sanitizedProps} />;\n}\nexport default withSanitizedData;\n","import React, { Component } from \"react\";\nimport \"./TableView.scss\";\nimport TableHeader from \"./TableHeader\";\nimport TableRow from \"./TableRow\";\nimport Loader from \"../../common/Loader\";\nimport { AppContext } from \"../../../contexts/appContext\";\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport withSanitizedData from \"../../hocs/withSanitizedData\";\n\nclass TableView extends Component {\n  static contextType = AppContext;\n\n  render() {\n    if (!this.context) return <Loader />;\n\n    const { properties } = this.context;\n\n    return (\n      <table className=\"table table-dark tableview\">\n        <TableHeader\n          headers={[\n            \"Image\",\n            \"Address\",\n            \"Year Built\",\n            \"List Price\",\n            \"Monthly Rent\",\n            \"Gross Yield\",\n          ]}\n        />\n        <tbody>\n          {properties.map((item) => withSanitizedData(TableRow, item))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default withRouter(TableView);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst GridCard = (props) => {\n  return (\n    <Link to={`/detail/${props.id}`}>\n      <div className=\"card\">\n        <img src={props.mainImageUrl} className=\"card-img-top\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{\"$\" + props.priceFormatted}</h5>\n          <div className=\"labels-inline\">\n            <p>\n              <strong>Current rent</strong>\n              {\"$\" + props.rentFormmated}\n            </p>\n            <p>\n              <strong>Gross Yield</strong>\n              {props.grossField + \"%\"}\n            </p>\n          </div>\n          <p className=\"card-text\">{props.fullAdress}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\nexport default GridCard;\n","import React, { Component } from \"react\";\n\nimport { AppContext } from \"../../../contexts/appContext\";\nimport Loader from \"../../common/Loader\";\nimport withSanitizedData from \"../../hocs/withSanitizedData\";\nimport GridCard from \"./GridCard\";\nimport \"./GridView.scss\";\n\nclass GridView extends Component {\n  static contextType = AppContext;\n\n  render() {\n    if (!this.context) return <Loader />;\n\n    const { properties } = this.context;\n    return (\n      <div className=\"grid\">\n        {properties.map((item) => withSanitizedData(GridCard, item))}\n      </div>\n    );\n  }\n}\n\nexport default GridView;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\">List of Properties</a>\n      <div className=\"btn-group my-2 my-sm-0\" role=\"group\">\n        <Link to=\"/list\">\n          <button type=\"button\" className=\"btn btn-primary\">\n            List\n          </button>\n        </Link>\n        <Link to=\"/grid\">\n          <button type=\"button\" className=\"btn btn-secondary\">\n            Grid\n          </button>\n        </Link>\n      </div>\n    </nav>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Carousel } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport { AppContext } from \"../../../contexts/appContext\";\nimport Loader from \"../../common/Loader\";\nimport \"./DetailView.scss\";\n\nclass DetailView extends Component {\n  static contextType = AppContext;\n\n  render() {\n    if (!this.context) return <Loader />;\n    const {\n      params: { id },\n    } = this.props.match;\n    const { properties } = this.context;\n\n    const itemFound = properties.find((item) => item.id == id);\n\n    if (!itemFound.resources) return <h3>No images found</h3>;\n\n    const photos = itemFound.resources.photos;\n    const address = itemFound.address;\n\n    return (\n      <Carousel>\n        {photos.map((photo) => (\n          <Carousel.Item key={photo.id}>\n            <img className=\"d-block w-100\" src={photo.url} alt=\"First slide\" />\n            <Carousel.Caption className=\"blackbox\">\n              <h3>\n                {address.address1}, {address.city}, {address.state}{\" \"}\n                {address.zip}\n              </h3>\n              <p>{itemFound.description}</p>\n            </Carousel.Caption>\n          </Carousel.Item>\n        ))}\n      </Carousel>\n    );\n  }\n}\nexport default withRouter(DetailView);\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nimport React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { AppContextProvider } from \"./contexts/appContext\";\nimport TableView from \"./components/views/TableView/TableView\";\nimport GridView from \"./components/views/GridView/GridView\";\nimport Navbar from \"./components/common/Navbar\";\nimport DetailView from \"./components/views/DetailView/DetailView\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <AppContextProvider>\n          <Navbar />\n          <div style={{ marginTop: 20 }}>\n            <Switch>\n              <Route path=\"/list\">\n                <TableView />\n              </Route>\n              <Route path=\"/grid\">\n                <GridView />\n              </Route>\n              <Route path=\"/detail/:id\">\n                <DetailView />\n              </Route>\n              <Route path=\"*\">\n                <Redirect to=\"/list\" />\n              </Route>\n            </Switch>\n          </div>\n        </AppContextProvider>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}