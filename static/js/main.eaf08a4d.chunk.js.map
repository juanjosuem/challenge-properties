{"version":3,"sources":["contexts/appContext.js","components/views/TableView/TableHeader.jsx","components/views/TableView/TableRow.jsx","components/common/Loader.jsx","utils/fomatter.js","components/hocs/withSanitizedData.jsx","components/views/TableView/TableView.jsx","components/views/GridView/GridCard.jsx","components/views/GridView/GridView.jsx","components/views/DetailView/DetailGallery.jsx","components/views/DetailView/DetailsText.jsx","components/views/DetailView/DetailView.jsx","components/common/Toolbar.jsx","App.js","serviceWorker.js","index.js"],"names":["baseUrl","AppContext","React","createContext","AppContextProvider","props","useState","data","setData","useEffect","a","fetch","response","json","fecthData","Provider","value","Container","fluid","children","TableHeader","headers","map","header","idx","key","scope","TableRow","id","fullAdress","yearBuilt","priceFormatted","rentFormmated","grossField","imageUrl","className","Image","src","roundedCircle","to","type","Loader","formatNumber","number","locale","Intl","NumberFormat","minimumFractionDigits","format","withSanitizedData","WrappedComponent","rawData","financial","address","physical","mainImageUrl","sanitizedProps","listPrice","monthlyRent","Number","toFixed","address1","city","state","zip","TableView","context","useContext","Table","striped","bordered","hover","variant","properties","item","GridCard","Card","Img","Body","Title","Text","GridView","DetailGallery","resources","photos","slice","length","Col","Carousel","photo","Item","url","alt","DetailsText","description","DetailView","match","params","itemFound","find","Row","Toolbar","pathname","useLocation","history","useHistory","Navbar","bg","Brand","href","Collapse","indexOf","Button","onClick","goBack","container","marginTop","App","style","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaf08a4d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nconst baseUrl =\n  \"https://samplerspubcontent.blob.core.windows.net/public/properties.json\";\n\nexport const AppContext = React.createContext();\n\nexport const AppContextProvider = (props) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    async function fecthData() {\n      const response = await fetch(baseUrl);\n      const data = await response.json();\n      setData(data);\n    }\n    fecthData();\n  }, []);\n\n  return (\n    <AppContext.Provider value={data}>\n      <Container fluid>{props.children}</Container>\n    </AppContext.Provider>\n  );\n};\n","import React from \"react\";\n\nexport default function TableHeader({ headers }) {\n  return (\n    <thead>\n      <tr>\n        {headers.map((header, idx) => (\n          <th key={idx} scope=\"col\">\n            {header}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n","import React from \"react\";\nimport { Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst TableRow = ({\n  id,\n  fullAdress,\n  yearBuilt,\n  priceFormatted,\n  rentFormmated,\n  grossField,\n  imageUrl,\n}) => {\n  return (\n    <tr className=\"centeredv-content\">\n      <td>\n        <Image src={imageUrl} roundedCircle className=\"image-property\" />\n      </td>\n      <td>{fullAdress}</td>\n      <td>{yearBuilt}</td>\n      <td>{priceFormatted}</td>\n      <td>{rentFormmated}</td>\n      <td>{grossField}</td>\n      <td>\n        <Link to={`/detail/${id}`}>\n          <button type=\"button\" className=\"btn btn-outline-success\">\n            See Details\n          </button>\n        </Link>\n      </td>\n    </tr>\n  );\n};\n\nTableRow.propTypes = {\n  id: PropTypes.number,\n  fullAdress: PropTypes.string,\n  yearBuilt: PropTypes.any,\n  priceFormatted: PropTypes.string,\n  rentFormmated: PropTypes.string,\n  grossField: PropTypes.string,\n};\n\nexport default TableRow;\n","import React from \"react\";\n\nexport default function Loader() {\n  return <div>Loading...</div>;\n}\n","function formatNumber(number, locale = \"en-US\") {\n  return new Intl.NumberFormat(locale, {\n    minimumFractionDigits: 2,\n  }).format(number);\n}\nexport default formatNumber;\n","import React from \"react\";\nimport formatNumber from \"../../utils/fomatter\";\n\nfunction withSanitizedData(WrappedComponent, rawData) {\n  const { financial, address, physical, mainImageUrl } = rawData;\n  const sanitizedProps = {\n    ...rawData,\n    yearBuilt: \"----\",\n    priceFormatted: \"----\",\n    rentFormmated: \"----\",\n    grossField: \"----\",\n    imageUrl: !mainImageUrl\n      ? \"https://via.placeholder.com/200x130?text=No image\"\n      : mainImageUrl,\n  };\n\n  if (physical) {\n    sanitizedProps.yearBuilt = physical.yearBuilt;\n  }\n  if (financial && financial.listPrice) {\n    sanitizedProps.priceFormatted = \"$\" + formatNumber(financial.listPrice);\n  }\n  if (financial && financial.monthlyRent) {\n    sanitizedProps.rentFormmated = \"$\" + formatNumber(financial.monthlyRent);\n  }\n  if (financial && financial.monthlyRent && financial.listPrice) {\n    sanitizedProps.grossField =\n      Number(\n        ((financial.monthlyRent * 12) / financial.listPrice) * 100\n      ).toFixed(2) + \"%\";\n  }\n  sanitizedProps.fullAdress = `${address.address1}, ${address.city}, ${address.state} ${address.zip}`;\n\n  return <WrappedComponent key={rawData.id} {...sanitizedProps} />;\n}\nexport default withSanitizedData;\n","import React, { useContext } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport TableHeader from \"./TableHeader\";\nimport TableRow from \"./TableRow\";\nimport Loader from \"../../common/Loader\";\nimport { AppContext } from \"../../../contexts/appContext\";\nimport withSanitizedData from \"../../hocs/withSanitizedData\";\nimport \"./TableView.scss\";\n\nconst TableView = () => {\n  const context = useContext(AppContext);\n  if (!context) return <Loader />;\n  return (\n    <Table striped bordered hover variant=\"dark\">\n      <TableHeader\n        headers={[\n          \"Image\",\n          \"Address\",\n          \"Year Built\",\n          \"List Price\",\n          \"Monthly Rent\",\n          \"Gross Yield\",\n        ]}\n      />\n      <tbody>\n        {context.properties.map((item) => withSanitizedData(TableRow, item))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default TableView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst GridCard = ({\n  id,\n  fullAdress,\n  priceFormatted,\n  rentFormmated,\n  grossField,\n  imageUrl,\n}) => {\n  return (\n    <Link to={`/detail/${id}`}>\n      <Card>\n        <Card.Img variant=\"top\" src={imageUrl} className=\"card-img-top\" />\n        <Card.Body>\n          <Card.Title>{priceFormatted}</Card.Title>\n          <div className=\"labels-inline\">\n            <p>\n              <strong>Current rent</strong> {rentFormmated}\n            </p>\n            <p>\n              <strong>Gross Yield</strong> {grossField}\n            </p>\n          </div>\n          <Card.Text>{fullAdress}</Card.Text>\n        </Card.Body>\n      </Card>\n    </Link>\n  );\n};\n\nGridCard.propTypes = {\n  id: PropTypes.number,\n  fullAdress: PropTypes.string,\n  yearBuilt: PropTypes.any,\n  priceFormatted: PropTypes.string,\n  rentFormmated: PropTypes.string,\n  grossField: PropTypes.string,\n};\n\nexport default GridCard;\n","import React, { useContext } from \"react\";\nimport GridCard from \"./GridCard\";\nimport { AppContext } from \"../../../contexts/appContext\";\nimport Loader from \"../../common/Loader\";\nimport withSanitizedData from \"../../hocs/withSanitizedData\";\nimport \"./GridView.scss\";\n\nconst GridView = () => {\n  const context = useContext(AppContext);\n  if (!context) return <Loader />;\n  return (\n    <div className=\"grid\">\n      {context.properties.map((item) => withSanitizedData(GridCard, item))}\n    </div>\n  );\n};\n\nexport default GridView;\n","import React from \"react\";\nimport { Carousel, Col } from \"react-bootstrap\";\n\nconst DetailGallery = ({ resources }) => {\n  const photos = resources?.photos.slice(1, resources.photos.length);\n  return (\n    <Col>\n      {!resources ? (\n        <h5>The property does not have images</h5>\n      ) : (\n        <Carousel className=\"carousel\">\n          {photos.map((photo) => (\n            <Carousel.Item key={photo.id}>\n              <img\n                className=\"d-block w-100\"\n                src={photo.url}\n                alt=\"First slide\"\n              />\n            </Carousel.Item>\n          ))}\n        </Carousel>\n      )}\n    </Col>\n  );\n};\nexport default DetailGallery;\n","import React from \"react\";\nimport { Col } from \"react-bootstrap\";\n\nconst DetailsText = ({ address, description }) => {\n  return (\n    <Col>\n      <h5>Address:</h5>\n      <p>\n        {address.address1}, {address.city}, {address.state} {address.zip}\n      </p>\n      <h5>Description:</h5>\n      <span>{description}</span>\n    </Col>\n  );\n};\n\nexport default DetailsText;\n","import React, { useContext } from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport DetailGallery from \"./DetailGallery\";\nimport { AppContext } from \"../../../contexts/appContext\";\nimport Loader from \"../../common/Loader\";\nimport DetailsText from \"./DetailsText\";\nimport \"./DetailView.scss\";\n\nconst DetailView = ({ match }) => {\n  const context = useContext(AppContext);\n  if (!context) return <Loader />;\n  const { id } = match.params;\n  const { properties } = context;\n  const itemFound = properties.find((item) => item.id === Number(id));\n\n  return (\n    <Row>\n      <DetailGallery {...itemFound} />\n      <DetailsText {...itemFound} />\n    </Row>\n  );\n};\n\nexport default DetailView;\n","import React from \"react\";\nimport { Navbar, Button } from \"react-bootstrap\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nconst Toolbar = () => {\n  const { pathname } = useLocation();\n  const history = useHistory();\n\n  return (\n    <Navbar bg=\"light\" variant=\"light\">\n      <Navbar.Brand href=\"#home\">List of Properties</Navbar.Brand>\n      <Navbar.Collapse className=\"justify-content-end\">\n        {pathname.indexOf(\"/detail\") === -1 ? (\n          <>\n            <Link to=\"/list\">\n              <button type=\"button\" className=\"btn btn-primary\">\n                List\n              </button>\n            </Link>\n            <Link to=\"/grid\">\n              <button type=\"button\" className=\"btn btn-secondary\">\n                Grid\n              </button>\n            </Link>\n          </>\n        ) : (\n          <Button variant=\"success\" onClick={() => history.goBack()}>\n            Go Back\n          </Button>\n        )}\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\nexport default Toolbar;\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { AppContextProvider } from \"./contexts/appContext\";\nimport TableView from \"./components/views/TableView/TableView\";\nimport GridView from \"./components/views/GridView/GridView\";\nimport DetailView from \"./components/views/DetailView/DetailView\";\nimport Toolbar from \"./components/common/Toolbar\";\n\nconst container = {\n  /* background: \"#7a7a7a\",\n  padding: \"30px 0\",*/\n  marginTop: 16,\n};\n\nconst App = () => (\n  <AppContextProvider>\n    <Router>\n      <Toolbar />\n      <div style={container}>\n        <Switch>\n          <Route exact path=\"/list\" component={TableView} />\n          <Route exact path=\"/grid\" component={GridView} />\n          <Route exact path=\"/detail/:id\" component={DetailView} />\n          <Route path=\"*\">\n            <Redirect to=\"/list\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  </AppContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}